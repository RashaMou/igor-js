import { getLogger } from "../logging.js";

const logger = getLogger("BaseReactor");

export class Reactor {
  /**
   * Abstract base class for all reactors in Igor.
   *
   * A reactor is responsible for handling specific types of events and generating
   * appropriate responses. It encapsulates a particular piece of functionality or
   * business logic.
   */

  constructor(hub) {
    if (new.target === Reactor) {
      throw new TypeError("Cannot construct Reactor instances directly");
    }
    this.hub = hub;
  }

  canHandle(event) {
    /**
     * Determine if this reactor can handle the given event.
     *
     * This method should return true if the reactor can handle the event,
     * and false otherwise.
     *
     * @param {Event} event - The event to be checked.
     * @returns {boolean} True if this reactor can handle the event, false otherwise.
     */
    throw new Error("canHandle() must be implemented by subclass");
  }

  async handle(event) {
    /**
     * Handle the given event and generate a response.
     *
     * This method should implement the core logic of the reactor. It will only
     * be called if canHandle() returns true for the given event.
     *
     * @param {Event} event - The event to be handled.
     * @returns {Response} The response generated by handling the event.
     */
    throw new Error("handle() must be implemented by subclass");
  }
}
